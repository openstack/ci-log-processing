---
- name: Create logscraper download directory
  file:
    path: "{{ item.download_dir }}"
    state: directory
    recurse: true
    owner: "{{ logscraper_user }}"
    group: "{{ logscraper_group }}"
  when: "'download_dir' in item"

- name: Generate logscraper script
  template:
    src: logscraper.sh.j2
    dest: "/usr/local/bin/logscraper-{{ item.tenant }}"
    mode: '0755'
  register: _start_script

- name: Generate logscraper config file
  template:
    src: config.j2
    dest: "{{ logscraper_dir }}/logscraper-{{ item.tenant }}.config"
    owner: "{{ logscraper_user }}"
    group: "{{ logscraper_group }}"
    mode: '0644'
  register: _config_file

- name: Delete old logscraper config file
  file:
    path: "{{ logscraper_dir }}/logscraper-{{ item.tenant }}.yaml"
    state: absent

- name: Generate logscraper download file list
  template:
    src: download-list.yaml.j2
    dest: "{{ logscraper_dir }}/download-list-{{ item.tenant }}.yaml"
    owner: "{{ logscraper_user }}"
    group: "{{ logscraper_group }}"
    mode: "0644"
  register: _download_file

- name: Generate systemd unit
  template:
    src: logscraper.service.j2
    dest: "/etc/systemd/system/logscraper-{{ item.tenant }}.service"
    owner: root
    group: root

- name: Set empty logscraper checkpoint file
  file:
    path: "{{ item.checkpoint_file | default(logscraper_dir + '/checkpoint-' + item.tenant) }}"
    state: touch
    owner: "{{ logscraper_user }}"
    group: "{{ logscraper_group }}"
    mode: "0644"

- name: Enable and restart service
  service:
    name: logscraper-{{ item.tenant }}
    state: restarted
    daemon-reload: true
    enabled: true
  when: _start_script.changed or _config_file.changed or _download_file.changed

- name: Ensure that service is running
  service:
    name: logscraper-{{ item.tenant }}
    state: started
    daemon-reload: true
    enabled: true
