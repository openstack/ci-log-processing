---
- name: Install packages
  package:
    name: podman
    state: present

### BUILD CONTAINER IMAGES ###
- name: Build container images
  block:
    - name: Build logscraper container image - Zuul
      shell: >
        podman build -t quay.io/logscraper:dev -f Dockerfile
      args:
        chdir: "{{ zuul.projects['opendev.org/openstack/ci-log-processing'].src_dir }}"
      when: zuul is defined

    - name: Build logscraper container image - non Zuul
      shell: >
        podman build -t quay.io/logscraper:dev -f Dockerfile
      args:
        chdir: "{{ playbook_dir }}"
      when: zuul is not defined

    - name: Get logscraper image id
      shell: |
        podman images --noheading quay.io/logscraper:dev  | awk '{print $3}'
      register: _logscraper_image_id

    - name: Print all images
      shell: |
        podman images

    - name: Replace container images
      set_fact:
        container_images:
          logscraper: "{{ _logscraper_image_id.stdout }}"

### OPENSEARCH ####
- name: Setup Opensearch
  shell: >
    podman run -d --name opensearch \
      --network host \
      -e "discovery.type=single-node" \
      quay.io/software-factory/opensearch:2.5.0

- name: Wait for Opensearch to be up
  wait_for:
    host: 127.0.0.1
    port: 9200
    delay: 10
    timeout: 300

- name: Wait for Opensearch to be up
  uri:
    url: "https://127.0.0.1:9200"
    user: "admin"
    password: "admin"
    force_basic_auth: true
    method: GET
    validate_certs: false
    status_code: "200"
  register: result
  until: result.status == 200
  retries: 30
  delay: 10

- name: Reconfigure once again security plugin
  shell: |
    podman exec -it opensearch bash -c "JAVA_HOME=/usr/share/opensearch/jdk /usr/share/opensearch/securityadmin_demo.sh"

### LOGSTASH ###

- name: Start Logstash service
  shell: >
    podman run -dit --name logstash --net host quay.io/software-factory/logstash-oss-with-opensearch-output-plugin:7.16.2 -e '
      input {
        tcp {
          port => {{ output_port }}
          codec => json_lines {}
          type => "zuul"
        }
      } output {
        opensearch {
          hosts => ["https://localhost:9200"]
          index => "logstash-logscraper-%{+YYYY.MM.dd}"
          user => "admin"
          password => "admin"
          ssl => true
          ssl_certificate_verification => false
        }
      } filter {
          grok {
            match => ["message", "(?<timestamp>[-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|)%{GREEDYDATA:message}"]
            overwrite => [ "message" ]
          }
          if [message] =~ /^\s*$/ {
              drop { }
          }
          date {
            match => ["timestamp", "yyyy-MM-dd HH:mm:ss.SSS"]
            timezone => "UTC"
          }
       }'

- name: Wait for Logstash to be up
  wait_for:
    host: 127.0.0.1
    port: "{{ output_port }}"
    delay: 10
    timeout: 300

### Logscraper ###
- name: Setup logscraper service
  include_role:
    name: logscraper

- name: Ensure that all services are available and running
  shell: |
    systemctl is-active -q {{ item }}
  loop:
    - logscraper-openstack
  register: _service_status
  failed_when: _service_status.rc != 0

- name: Get Opensearch indices
  block:
    - name: Get indices
      uri:
        url: "https://127.0.0.1:9200/_cat/indices"
        user: "admin"
        password: "admin"
        force_basic_auth: true
        method: GET
        validate_certs: false
        status_code: "200"
        return_content: true
      register: _opensearch_indices
      until: "'logstash-logscraper' in _opensearch_indices.content"
      retries: 30
      delay: 10

  rescue:
    - name: List all podman containers
      shell: |
        podman ps -a

    - name: Get logstash logs
      shell: |
        podman logs logstash

    - name: Get opensearch logs
      shell: |
        podman logs opensearch

    - name: Get indices to fail the test
      uri:
        url: "https://127.0.0.1:9200/_cat/indices"
        user: "admin"
        password: "admin"
        force_basic_auth: true
        method: GET
        validate_certs: false
        status_code: "200"
        return_content: true
      register: _opensearch_indices
      until: "'logstash-logscraper' in _opensearch_indices.content"
      retries: 3
      delay: 10
