AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  InstanceTypeParameter:
    Type: String
    Default: t3a.medium
    Description: Enter instance size. Default is t3a.medium.

  SSHKey:
    Type: String
    Description: The key used to access the instance.

  OpenSearchDomainName:
    Type: String
    Default: openstack-prod-cluster
    Description: Name for OpenSearch cluster

  OpenSearchCustomEndpoint:
    Type: String
    Default: opensearch.logs.openstack.org
    Description: Custom endpoint for OpenSearch cluster

  # AccountNumber:
  #   Type: String
  #   Default: ''
  #   Description: Account number for the AWS account we're deploying into

Resources:
  #############################################
  #
  #  Networking resources
  #
  #############################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Opensearch VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true

  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'RouteTable'

  # Attach Public Route to Public Subnets
  SubnetPublic1PublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPublic1

  SubnetPublic2PublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPublic2

  # SubnetPublicRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref 'RouteTable'
  #     SubnetId: !Ref 'SubnetPublic'

  #############################################
  #
  #  OpenSearch Cluster and related resources
  #
  #############################################
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for OpenSearch encryption at rest
      Enabled: true
      EnableKeyRotation: false  # TODO: Can we rotate the key if it's used for encryption at rest?
      KeyPolicy:
        Id: key-consolepolicy-3
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::035559393697:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::035559393697:user/opensearch-kms-principal
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:ReplicateKey
              - kms:UpdatePrimaryRegion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::035559393697:user/opensearch-kms-principal
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::035559393697:user/opensearch-kms-principal
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: 'true'
      KeySpec: SYMMETRIC_DEFAULT
      MultiRegion: true

  # We need to create a Service-Linked Role for OpenSearch so that it can perform certain actions (like assigning a domain endpoint with a
  # certificate to our cluster). Simply creating it is enough, it doesn't have to be assigned anywhere.
  # TODO: This requires certain permissions for the user account that's creating the CloudFormation stack, see https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html#service-linked-role-permissions
  OpensearchSLR:
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: es.amazonaws.com
      Description: Service-linked role for OpenSearch

  OpenSearchCluster:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: es:ESHttp*
            Resource: !Join ['', ['arn:aws:es:us-east-1:', !Ref 'AWS::AccountId', ':domain/', !Ref OpenSearchDomainName, '/*']]
      AdvancedSecurityOptions:
        # Enable fine-grained access control
        Enabled: true
        # Create an internal user database for username/password authentication
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          # Get username and password from Secret Manager (using resource exported from ecr.yaml)
          MasterUserName: !Join ['', ['{{resolve:secretsmanager:', Fn::ImportValue: !Sub OpenSearchAdminCredentialsSecret, ':SecretString:username}}' ]]
          MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', Fn::ImportValue: !Sub OpenSearchAdminCredentialsSecret, ':SecretString:password}}' ]]
      ClusterConfig:
        DedicatedMasterEnabled: true
        DedicatedMasterCount: 3
        DedicatedMasterType: m6g.xlarge.search
        # For zone-aware, this has to be an even number:
        InstanceCount: 8
        InstanceType: m6g.xlarge.search
        WarmEnabled: false
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 2
      DomainEndpointOptions:
        CustomEndpointEnabled: true
        CustomEndpoint: !Ref OpenSearchCustomEndpoint
        CustomEndpointCertificateArn: arn:aws:acm:us-east-1:035559393697:certificate/1f23d574-2e92-4f5a-8a16-29859ae63c42
        EnforceHTTPS: true
        # Require TLS1.2 (alternative is 1.0 which is insecure)
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      DomainName:
        Ref: OpenSearchDomainName
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 50
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref 'KMSKey'
        # As of 2021-12-14, "OpenSearch_1.0" is the only valid option. Immediately after deploying,
        # upgrade via the AWS Console to at least version 1.2.1 (which uses Logstash version 2.15.0
        # and patches Log4Shell vulnerabilities)
      EngineVersion: OpenSearch_1.0
      NodeToNodeEncryptionOptions:
        Enabled: true
    # Allow upgrades to newest version of OpenSearch without replacing the entire cluster
    UpdatePolicy:
      EnableVersionUpgrade: true


Outputs:
  VPC:
    Value: !Ref VPC
    Description: VPC (imported in logstash_cluster.yaml)
    Export:
      Name: VPC

  SubnetPublic1:
    Value: !Ref SubnetPublic1
    Description: SubnetPublic1 (imported in logstash_cluster.yaml)
    Export:
      Name: SubnetPublic1

  SubnetPrivate1:
    Value: !Ref SubnetPrivate1
    Description: SubnetPrivate1 (imported in logstash_cluster.yaml)
    Export:
      Name: SubnetPrivate1

  SubnetPublic2:
    Value: !Ref SubnetPublic2
    Description: SubnetPublic2 (imported in logstash_cluster.yaml)
    Export:
      Name: SubnetPublic2

  SubnetPrivate2:
    Value: !Ref SubnetPrivate2
    Description: SubnetPrivate2 (imported in logstash_cluster.yaml)
    Export:
      Name: SubnetPrivate2
